/**
 * EasyBeans
 * Copyright (C) 2011 Bull S.A.S.
 * Contact: easybeans@ow2.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 * --------------------------------------------------------------------------
 * $Id: EasyBeansClassWriter.java 5997 2011-10-13 15:12:47Z benoitf $
 * --------------------------------------------------------------------------
 */

package org.ow2.easybeans.enhancer;

import org.ow2.easybeans.asm.ClassWriter;

/**
 * This Class writer is used in order to be able to load class through Thread
 * Context class loader. Else by default it is using an undefined ClassLoader
 * which may lead to CNFE.
 * @author Florent Benoit
 */
public class EasyBeansClassWriter extends ClassWriter {

    /**
     * ClassLoader used to load the classes.
     * Note: It shouldn't be the classloader used to write the classes as we may want to redefine classes.
     */
    private ClassLoader readClassLoader = null;

    /**
     * Constructor of the ClassWriter.
     * @param readClassLoader the classloader used to load classes.
     */
    public EasyBeansClassWriter(final ClassLoader readClassLoader) {
        super(ClassWriter.COMPUTE_FRAMES);
        this.readClassLoader = readClassLoader;
    }

    /**
     * Returns the common super type of the two given types. The default
     * implementation of this method <i>loads</i> the two given classes and uses
     * the java.lang.Class methods to find the common super class. It can be
     * overridden to compute this common super type in other ways, in particular
     * without actually loading any class, or to take into account the class
     * that is currently being generated by this ClassWriter, which can of
     * course not be loaded since it is under construction.
     * @param type1 the internal name of a class.
     * @param type2 the internal name of another class.
     * @return the internal name of the common super class of the two given
     *         classes.
     */
    @Override
    protected String getCommonSuperClass(final String type1, final String type2) {
        Class<?> c, d;
        try {
            c = Class.forName(type1.replace('/', '.'), false, this.readClassLoader);
            d = Class.forName(type2.replace('/', '.'), false, this.readClassLoader);
        } catch (Exception e) {
            throw new RuntimeException(e.toString());
        }
        if (c.isAssignableFrom(d)) {
            return type1;
        }
        if (d.isAssignableFrom(c)) {
            return type2;
        }
        if (c.isInterface() || d.isInterface()) {
            return "java/lang/Object";
        }
        do {
            c = c.getSuperclass();
        } while (!c.isAssignableFrom(d));
        return c.getName().replace('.', '/');
    }
}
